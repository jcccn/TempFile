<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1">
    <link type="text/css" rel="stylesheet" href="http://7rf34y.com2.z0.glb.qiniucdn.com/assets/css/app_post.css">
    <script type="text/javascript" src="http://7rf34y.com2.z0.glb.qiniucdn.com/assets/js/jquery.min.js"></script>
    <script type="text/javascript" src="http://7rf34y.com2.z0.glb.qiniucdn.com/assets/js/jquery.lazyload.min.js"></script>
    <script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.0.0/highlight.min.js"></script>
    <script type="text/javascript" src="http://7rf34y.com2.z0.glb.qiniucdn.com/assets/js/webview_main.js"></script>
</head>
<body>
<blockquote>
	<p>
		记得第一次读这个文档还是3年前，那时也只是泛读。如今关于iOS多线程的文章层出不穷，但我觉得若想更好的领会各个实践者的文章，应该先仔细读读官方的相关文档，打好基础，定会有更好的效果。文章中有对官方文档的翻译，也有自己的理解，官方文档中代码片段的示例在这篇文章中都进行了完整的重写，还有一些文档中没有的代码示例，并且都使用Swift完成，给大家一些Objc与Swift转换的参考。<br>
官方文档地址：<a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html" target="_blank">Threading Programming Guide</a> 
	</p>
</blockquote>
<h2 id="u4F55_u65F6_u4F7F_u7528Run_Loop">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u4F55_u65F6_u4F7F_u7528Run_Loop" class="headerlink"></a>何时使用Run Loop
</h2>
<p>
	前文中多次提到过，在主线程中Run Loop是随着应用程序一起启动的，也就是说当我们打开一个应用时，主线程中的Run Loop就已经启动了，尤其现在我们都使用Xcode中的项目模版创建项目，更是不用考虑主线程中Run Loop的状体。所以只有在二级线程中，也就是我们自己创建的线程中才有机会手动的创建的Run Loop，并对其进行配置的操作。
</p>
<p>
	在前文中还提到过，Run Loop在线程中的主要作用就是帮助线程常驻在进程中，并且不会过多消耗资源。所以说Run Loop在二级线程中也不是必须需要的，要根据该线程执行的任务类型以及在整个应用中担任何作用而决定是否需要使用Run Loop。比如说，如果你创建一个二级线程只是为了执行一个不会频繁执行的一次性任务，或者需要执行很长时间的任务，那么可能就不需要使用Run Loop了。如果你需要一个线程执行周期性的定时任务，或者需要较为频繁的与主线程之间进行交互，那么就需要使用Run Loop。归纳一下需要使用Run Loop的情况大概有以下四点：
</p>
<ul>
	<li>
		通过基于端口或自定义的数据源与其他线程进行交互。
	</li>
	<li>
		在线程中执行定时事件源的任务。
	</li>
	<li>
		使用Cocoa框架提供的performSelector…系列方法。
	</li>
	<li>
		在线程中执行较为频繁的，具有周期性的任务。
	</li>
</ul>
<p>
	光说不练假把式，下面就让我们来看看如何具体创建、配置、操作Run Loop。
</p>
<h2 id="Run_Loop_u5BF9_u8C61">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#Run_Loop_u5BF9_u8C61" class="headerlink"></a>Run Loop对象
</h2>
<p>
	要想操作配置Run Loop，那自然需要通过Run Loop对象来完成，它提供了一系列接口，可帮助我们便捷的添加Input sources、timers以及观察者。较高级别的Cocoa框架提供了NSRunLoop类，较底层级别的Core Foundation框架提供了指向CFRunloopRef的指针。
</p>
<h3 id="u83B7_u53D6Run_Loop_u5BF9_u8C61">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u83B7_u53D6Run_Loop_u5BF9_u8C61" class="headerlink"></a>获取Run Loop对象
</h3>
<p>
	前文中提到过，在Cocoa和Core Foundation框架中都没有提供创建Run Loop的方法，只有从当前线程获取Run Loop的方法：
</p>
<ul>
	<li>
		在Cocoa框架中，NSRunLoop类提供了类方法currentRunLoop()获取NSRunLoop对象。
		<blockquote>
			<p>
				该方法是获取当前线程中已存在的Run Loop，如果不存在，那其实还是会创建一个Run Loop对象返回，只是Cocoa框架没有向我们暴露该接口。
			</p>
		</blockquote>
	</li>
	<li>
		在Core Foundation框架中提供了CFRunLoopGetCurrent()函数获取CFRunLoop对象。
	</li>
</ul>
<p>
	虽然这两个Run Loop对象并不完全等价，它们之间还是可以转换的，我们可以通过NSRunLoop对象提供的getCFRunLoop()方法获取CFRunLoop对象。因为NSRunLoop和CFRunLoop指向的都是当前线程中同一个Run Loop，所以在使用时它们可以混用，比如说要给Run Loop添加观察者时就必须得用CFRunLoop了。
</p>
<h3 id="u914D_u7F6ERun_Loop_u89C2_u5BDF_u8005">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u914D_u7F6ERun_Loop_u89C2_u5BDF_u8005" class="headerlink"></a>配置Run Loop观察者
</h3>
<p>
	前文中提到过，可以向Run Loop中添加各种事件源和观察者，这里事件源是必填项，也就是说Run Loop中至少要有一种事件源，不论是Input source还是timer，如果Run Loop中没有事件源的话，那么在启动Run Loop后就会立即退出。而观察者是可选项，如果没有监控Run Loop各运行状态的需求，可以不配置观察者，这一节先看看如何向Run Loop中添加观察者。
</p>
<p>
	在Cocoa框架中，并没有提供创建配置Run Loop观察者的相关接口，所以我们只能通过Core Foundation框架中提供的对象和方法创建并配置Run Loop观察者，下面我们看看示例代码：
</p>
<pre class="prettyprint lang-js">import Foundation

class TestThread: NSObject {
    
    func launch() {
        
        print("First event in Main Thread.")
        
        NSThread.detachNewThreadSelector("createAndConfigObserverInSecondaryThread", toTarget: self, withObject: nil)
        
        print(NSThread.isMultiThreaded())
        
        sleep(3)
        
        print("Second event in Main Thread.")
  
    }
    
    func createAndConfigObserverInSecondaryThread() {
        
        autoreleasepool{
            
            // 1
            let runloop = NSRunLoop.currentRunLoop()
            
            // 2
            var _self = self
            
            // 3
            var observerContext = CFRunLoopObserverContext(version: 0, info: &amp;_self, retain: nil, release: nil, copyDescription: nil)
            
            // 4
            let observer = CFRunLoopObserverCreate(kCFAllocatorDefault, CFRunLoopActivity.AllActivities.rawValue, true, 0, self.observerCallbackFunc(), &amp;observerContext)
            
            if(observer != nil) {
                
                // 5
                let cfRunloop = runloop.getCFRunLoop()
                
                // 6
                CFRunLoopAddObserver(cfRunloop, observer, kCFRunLoopDefaultMode)
                
            }
            
            // 7
            NSTimer.scheduledTimerWithTimeInterval(0.5, target: self, selector: "fireTimer", userInfo: nil, repeats: true)
            
            var loopCount = 10
            
            repeat {
            
                // 8
                runloop.runUntilDate(NSDate(timeIntervalSinceNow: 1))
                
                loopCount--
            
            } while(loopCount &gt; 0)
            
        }
        
    }
    
    func observerCallbackFunc() -&gt; CFRunLoopObserverCallBack {
        
        return {(observer, activity, context) -&gt; Void in
        
            switch(activity) {
                
            case CFRunLoopActivity.Entry:
                print("Run Loop已经启动")
                break
            case CFRunLoopActivity.BeforeTimers:
                print("Run Loop分配定时任务前")
                break
            case CFRunLoopActivity.BeforeSources:
                print("Run Loop分配输入事件源前")
                break
            case CFRunLoopActivity.BeforeWaiting:
                print("Run Loop休眠前")
                break
            case CFRunLoopActivity.AfterWaiting:
                print("Run Loop休眠后")
                break
            case CFRunLoopActivity.Exit:
                print("Run Loop退出后")
                break
            default:
                break
                
            }
        
        }
        
    }
    
    func fireTimer() {
        
    }
    
}

let testThread = TestThread()
testThread.launch()</pre>
<p>
	下面解读一下上述代码示例，launch()方法在主线程中，通过NSThread类的类方法detachNewThreadSelector:toTarget:withObject:创建并启动一个二级线程，将createAndConfigObserverInSecondaryThread()方法作为事件消息传入该二级线程，这个方法的主要作用就是在二级线程中创建配置Run Loop观察者并启动Run Loop，然后让主线程持续3秒，以便二级线程有足够的时间执行任务。
</p>
<p>
	在createAndConfigObserverInSecondaryThread()中共有8个关键步骤，下面一一进行说明：
</p>
<ul>
	<li>
		<strong>第一步</strong>：通过NSRunLoop类的类方法currentRunLoop()获取当前线程的Run Loop，这里获取到的Run Loop对象是NSRunLoop对象。
	</li>
	<li>
		<strong>第二步</strong>：申明当前对象的变量，至于为什么要这么做，在下一步中会有说明。
	</li>
	<li>
		<strong>第三步</strong>：通过Core Foundation框架的CFRunLoopObserverContext结构体构造Run Loop观察者上下文，大家需要注意前两个参数，我们先看看这个结构体：
	</li>
</ul>
<p>
	<span><span> </span></span> 
</p>
<pre class="prettyprint lang-js">public struct CFRunLoopObserverContext {
    public var version: CFIndex
    public var info: UnsafeMutablePointer&lt;Void&gt;
    public var retain: (@convention(c) (UnsafePointer&lt;Void&gt;) -&gt; UnsafePointer&lt;Void&gt;)!
    public var release: (@convention(c) (UnsafePointer&lt;Void&gt;) -&gt; Void)!
    public var copyDescription: (@convention(c) (UnsafePointer&lt;Void&gt;) -&gt; Unmanaged&lt;CFString&gt;!)!
    public init()
    public init(version: CFIndex, info: UnsafeMutablePointer&lt;Void&gt;, retain: (@convention(c) (UnsafePointer&lt;Void&gt;) -&gt; UnsafePointer&lt;Void&gt;)!, release: (@convention(c) (UnsafePointer&lt;Void&gt;) -&gt; Void)!, copyDescription: (@convention(c) (UnsafePointer&lt;Void&gt;) -&gt; Unmanaged&lt;CFString&gt;!)!)
}</pre>
<ol>
	<li>
		version：结构体版本号，必须设置为0。
	</li>
	<li>
		info：上下文中retain、release、copyDescription三个回调函数以及Run Loop观察者的回调函数所有者对象的指针。在Swift中，UnsafePointer结构体代表C系语言中申明为常量的指针，UnsafeMutablePoinger结构体代表C系语言中申明为非常量的指针，比如说：
	</li>
</ol>
<p>
	<span><span> </span></span> 
</p>
<pre class="prettyprint lang-js">C:
void functionWithConstArg(const int *constIntPointer);

Swift:
func functionWithConstArg(constIntPointer: UnsafePointer&lt;Int32&gt;)

C:
void functionWithNotConstArg(unsigned int *unsignedIntPointer);

Swift:
func functionWithNotConstArg(unsignedIntPointer: UnsafeMutablePointer&lt;UInt32&gt;)

C:
void functionWithNoReturnArg(void *voidPointer);

Swift:
func functionWithNoReturnArg(voidPointer: UnsafeMutablePointer&lt;Void&gt;)</pre>
<ul>
	<li>
		<strong>第四步</strong>：通过Core Foundation框架的CFRunLoopObserverCreate函数创建CFRunLoopObserver对象：
	</li>
</ul>
<p>
	<span><span> </span></span> 
</p>
<pre class="prettyprint lang-js">public func CFRunLoopObserverCreate(allocator: CFAllocator!, _ activities: CFOptionFlags, _ repeats: Bool, _ order: CFIndex, _ callout: CFRunLoopObserverCallBack!, _ context: UnsafeMutablePointer&lt;CFRunLoopObserverContext&gt;) -&gt; CFRunLoopObserver!</pre>
<ol>
	<li>
		allocator：该参数为对象内存分配器，一般使用默认的分配器kCFAllocatorDefault。
	</li>
	<li>
		activities：该参数配置观察者监听Run Loop的哪种运行状态。在示例中，我们让观察者监听Run Loop的所有运行状态。
	</li>
	<li>
		repeats：该参数标识观察者只监听一次还是每次Run Loop运行时都监听。
	</li>
	<li>
		order：观察者优先级，当Run Loop中有多个观察者监听同一个运行状态时，那么就根据该优先级判断，0为最高优先级别。
	</li>
	<li>
		callout：观察者的回调函数，在Core Foundation框架中用CFRunLoopObserverCallBack重定义了回调函数的闭包。
	</li>
	<li>
		context：观察者的上下文。
	</li>
</ol>
<ul>
	<li>
		<strong>第五步</strong>：因为NSRunLoop没有提供操作观察者的接口，所以我们需要getCFRunLoop()方法获取到CFRunLoop对象。
	</li>
	<li>
		<strong>第六步</strong>：通过CFRunLoopAddObserver函数向当前线程的Run Loop中添加创建好的观察者：
	</li>
</ul>
<p>
	<span><span> </span></span> 
</p>
<pre class="prettyprint lang-js">func CFRunLoopAddObserver(_ rl: CFRunLoop!, _ observer: CFRunLoopObserver!, _ mode: CFString!)</pre>
<ol>
	<li>
		rl：当前线程的CFRunLoop对象。
	</li>
	<li>
		observer：创建好的观察者。
	</li>
	<li>
		mode：设置将观察者添加到哪个Run Loop模式中。
	</li>
</ol>
<blockquote>
	<p>
		这里需要注意的是，一个观察者只能被添加到一个Run Loop中，但是可以被添加到Run Loop中的多个模式中。
	</p>
</blockquote>
<ul>
	<li>
		<strong>第七步</strong>：通过Timer事件源向当前线程发送重复执行的定时任务，时间间隔为0.5秒，因为只是为了测试观察者，所以fireTimer()是一个空任务。另外前文中提到过，如果Run Loop中没有任何数据源，那么Run Loop启动后会立即退出，所以大家可以把这行注释了运行看看会有什么效果。
	</li>
	<li>
		<strong>第八步</strong>：通过NSRunLoop对象的runUntilDate(limitDate: NSDate)方法启动Run Loop，设置Run Loop的运行时长为1秒。这里将其放在一个循环里，最大循环次数为10次，也就是说，如果不考虑主线程的运行时间，该二级线程的Run Loop可运行10次。
	</li>
</ul>
<p>
	再来看看观察者的回调方法observerCallbackFunc()，上面在介绍CFRunLoopObserverCreate函数时提到观察者的回调函数是CFRunLoopObserverCallBack重定义的一个闭包，我们来看看这个闭包：
</p>
<pre class="prettyprint lang-js">typealias CFRunLoopObserverCallBack = (CFRunLoopObserver!, CFRunLoopActivity, UnsafeMutablePointer&lt;Void&gt;) -&gt; Void</pre>
<p>
	这个闭包没有返回值，第一个参数是触发监听的观察者，第二个参数是观察者监听的Run Loop运行状态，第三个参数是观察者的运行上下文环境。所以在回调方法中，我们只需要根据第二个参数的值即可判断观察者监听到的Run Loop状态。大家可以拷贝上面的代码，建一个Command Application运行看看结果。
</p>
<h3 id="u542F_u52A8Run_Loop">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u542F_u52A8Run_Loop" class="headerlink"></a>启动Run Loop
</h3>
<p>
	在启动Run Loop前务必要保证已添加一种类型的事件源，原因在前文中已提到多次。在Cocoa框架和Core Foundation框架中启动Run Loop大体有三种形式，分别是无条件启动、设置时间限制启动、指定特定模式启动。
</p>
<h4 id="u65E0_u6761_u4EF6_u542F_u52A8">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u65E0_u6761_u4EF6_u542F_u52A8" class="headerlink"></a>无条件启动
</h4>
<p>
	NSRunLoop对象的run()方法和Core Foundation框架中的CFRunLoopRun()函数都是无条件启动Run Loop的方式。这种方式虽然是最简单的启动方式，但也是最不推荐使用的一个方式，因为这种方式将Run Loop置于一个永久运行并且不可控的状态，它使Run Loop只能在默认模式下运行，无法给Run Loop设置特定的或自定义的模式，而且以这种模式启动的Run Loop只能通过CFRunLoopStop(_ rl: CFRunLoop!)函数强制停止。
</p>
<h4 id="u8BBE_u7F6E_u65F6_u95F4_u9650_u5236_u542F_u52A8">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u8BBE_u7F6E_u65F6_u95F4_u9650_u5236_u542F_u52A8" class="headerlink"></a>设置时间限制启动
</h4>
<p>
	该方式对应的方法是NSRunLoop对象的runUntilDate(_ limitDate: NSDate)方法，在启动Run Loop时设置超时时间，一旦超时那么Run Loop则自动退出。该方法的好处是可以在循环中反复启动Run Loop处理相关任务，而且可控制运行时长。
</p>
<h4 id="u6307_u5B9A_u7279_u5B9A_u6A21_u5F0F_u542F_u52A8">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u6307_u5B9A_u7279_u5B9A_u6A21_u5F0F_u542F_u52A8" class="headerlink"></a>指定特定模式启动
</h4>
<p>
	该方式对应的方法是NSRunLoop对象的runMode(_ mode: String, beforeDate limitDate: NSDate)方法和Core Foundation框架的CFRunLoopRunInMode(_ mode: CFString!, _ seconds: CFTimeInterval, _ returnAfterSourceHandled: Bool)函数。前者有两个参数，第一个参数是Run Loop模式，第二个参数仍然是超时时间，该方法使Run Loop只处理指定模式中的事件源事件，当处理完事件或超时Run Loop会退出，该方法的返回值类型是Bool，如果返回true则表示Run Loop启动成功，并分派执行了任务或者达到超时时间，若返回false则表示Run Loop启动失败。后者有三个参数，前两个参数的作用一样，第三个参数的意思是Run Loop是否在执行完任务后就退出，如果设置为false，那么代表Run Loop在执行完任务后不退出，而是一直等到超时后才退出。该方法返回Run Loop的退出状态：
</p>
<ul>
	<li>
		CFRunLoopRunResult.Finished：表示Run Loop已分派执行完任务，并且再无任务执行的情况下退出。
	</li>
	<li>
		CFRunLoopRunResult.Stopped：表示Run Loop通过CFRunLoopStop(_ rl: CFRunLoop!)函数强制退出。
	</li>
	<li>
		CFRunLoopRunResult.TimedOut：表示Run Loop因为超时时间到而退出。
	</li>
	<li>
		CFRunLoopRunResult.HandledSource：表示Run Loop已执行完任务而退出，改状态只有在returnAfterSourceHandled设置为true时才会出现。
	</li>
</ul>
<h3 id="u9000_u51FARun_Loop">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u9000_u51FARun_Loop" class="headerlink"></a>退出Run Loop
</h3>
<p>
	退出Run Loop的方式总体来说有三种：
</p>
<ul>
	<li>
		启动Run Loop时设置超时时间。
	</li>
	<li>
		强制退出Run Loop。
	</li>
	<li>
		移除Run Loop中的事件源，从而使Run Loop退出。
	</li>
</ul>
<p>
	第一种方式是推荐使用的方式，因为可以给Run Loop设置可控的运行时间，让它执行完所有的任务以及给观察者发送通知。第二种强制退出Run Loop主要是应对无条件启动Run Loop的情况。第三种方式是最不推荐的方式，虽然在理论上说当Run Loop中没有任何数据源时会立即退出，但是在实际情况中我们创建的二级线程除了执行我们指定的任务外，有可能系统还会让其执行一些系统层面的任务，而且这些任务我们一般无法知晓，所以用这种方式退出Run Loop往往会存在延迟退出。
</p>
<h3 id="Run_Loop_u5BF9_u8C61_u7684_u7EBF_u7A0B_u5B89_u5168_u6027">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#Run_Loop_u5BF9_u8C61_u7684_u7EBF_u7A0B_u5B89_u5168_u6027" class="headerlink"></a>Run Loop对象的线程安全性
</h3>
<p>
	Run Loop对象的线程安全性取决于我们使用哪种API去操作。Core Foundation框架中的CFRunLoop对象是线程安全的，我们可以在任何线程中使用。Cocoa框架的NSRunLoop对象是线程不安全的，我们必须在拥有Run Loop的当前线程中操作Run Loop，如果操作了不属于当前线程的Run loop，会导致异常和各种潜在的问题发生。
</p>
<h2 id="u81EA_u5B9A_u4E49Run_Loop_u4E8B_u4EF6_u6E90">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u81EA_u5B9A_u4E49Run_Loop_u4E8B_u4EF6_u6E90" class="headerlink"></a>自定义Run Loop事件源
</h2>
<p>
	Cocoa框架因为是较为高层的框架，所以没有提供操作较为底层的Run Loop事件源相关的接口和对象，所以我们只能使用Core Foundation框架中的对象和函数创建事件源并给Run Loop设置事件源。
</p>
<h3 id="u521B_u5EFARun_Loop_u4E8B_u4EF6_u6E90_u5BF9_u8C61">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u521B_u5EFARun_Loop_u4E8B_u4EF6_u6E90_u5BF9_u8C61" class="headerlink"></a>创建Run Loop事件源对象
</h3>
<p>
	我们定义自己的Run Loop事件源首先就是需要创建事件源，我们来看看创建事件源的方法：
</p>
<pre class="prettyprint lang-js">func CFRunLoopSourceCreate(_ allocator: CFAllocator!, _ order: CFIndex, _ context: UnsafeMutablePointer&lt;CFRunLoopSourceContext&gt;) -&gt; CFRunLoopSource!</pre>
<ol>
	<li>
		allocator：该参数为对象内存分配器，一般使用默认的分配器kCFAllocatorDefault。
	</li>
	<li>
		order：事件源优先级，当Run Loop中有多个接收相同事件的事件源被标记为待执行时，那么就根据该优先级判断，0为最高优先级别。
	</li>
	<li>
		context：事件源上下文。
	</li>
</ol>
<p>
	Run Loop事件源上下文很重要，我们来看看它的结构：
</p>
<pre class="prettyprint lang-js">struct CFRunLoopSourceContext { 
    var version: CFIndex 
    var info: UnsafeMutablePointer&lt;Void&gt; 
    var retain: ((UnsafePointer&lt;Void&gt;) -&gt; UnsafePointer&lt;Void&gt;)! 
    var release: ((UnsafePointer&lt;Void&gt;) -&gt; Void)! 
    var copyDescription: ((UnsafePointer&lt;Void&gt;) -&gt; Unmanaged&lt;CFString&gt;!)! 
    var equal: ((UnsafePointer&lt;Void&gt;, UnsafePointer&lt;Void&gt;) -&gt; DarwinBoolean)! 
    var hash: ((UnsafePointer&lt;Void&gt;) -&gt; CFHashCode)! 
    var schedule: ((UnsafeMutablePointer&lt;Void&gt;, CFRunLoop!, CFString!) -&gt; Void)! 
    var cancel: ((UnsafeMutablePointer&lt;Void&gt;, CFRunLoop!, CFString!) -&gt; Void)! 
    var perform: ((UnsafeMutablePointer&lt;Void&gt;) -&gt; Void)! 
    init() 
    init(version version: CFIndex, info info: UnsafeMutablePointer&lt;Void&gt;, retain retain: ((UnsafePointer&lt;Void&gt;) -&gt; UnsafePointer&lt;Void&gt;)!, release release: ((UnsafePointer&lt;Void&gt;) -&gt; Void)!, copyDescription copyDescription: ((UnsafePointer&lt;Void&gt;) -&gt; Unmanaged&lt;CFString&gt;!)!, equal equal: ((UnsafePointer&lt;Void&gt;, UnsafePointer&lt;Void&gt;) -&gt; DarwinBoolean)!, hash hash: ((UnsafePointer&lt;Void&gt;) -&gt; CFHashCode)!, schedule schedule: ((UnsafeMutablePointer&lt;Void&gt;, CFRunLoop!, CFString!) -&gt; Void)!, cancel cancel: ((UnsafeMutablePointer&lt;Void&gt;, CFRunLoop!, CFString!) -&gt; Void)!, perform perform: ((UnsafeMutablePointer&lt;Void&gt;) -&gt; Void)!) 
}</pre>
<p>
	该结构体中我们需要关注的是前两个和后三个属性：
</p>
<ol>
	<li>
		version：事件源上下文的版本，必须设置为0。
	</li>
	<li>
		info：上下文中retain、release、copyDescription、equal、hash、schedule、cancel、perform这八个回调函数所有者对象的指针。
	</li>
	<li>
		schedule：该回调函数的作用是将该事件源与给它发送事件消息的线程进行关联，也就是说如果主线程想要给该事件源发送事件消息，那么首先主线程得能获取到该事件源。
	</li>
	<li>
		cancel：该回调函数的作用是使该事件源失效。
	</li>
	<li>
		perform：该回调函数的作用是执行其他线程或当前线程给该事件源发来的事件消息。
	</li>
</ol>
<h3 id="u5C06_u4E8B_u4EF6_u6E90_u6DFB_u52A0_u81F3Run_Loop">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u5C06_u4E8B_u4EF6_u6E90_u6DFB_u52A0_u81F3Run_Loop" class="headerlink"></a>将事件源添加至Run Loop
</h3>
<p>
	事件源创建好之后，接下来就是将其添加到指定某个模式的Run Loop中，我们来看看这个方法：
</p>
<pre class="prettyprint lang-js">func CFRunLoopAddSource(_ rl: CFRunLoop!, _ source: CFRunLoopSource!, _ mode: CFString!)</pre>
<ol>
	<li>
		rl：希望添加事件源的Run Loop对象，类型是CFRunLoop。
	</li>
	<li>
		source：我们创建好的事件源。
	</li>
	<li>
		mode：Run Loop的模式。（可以回顾之前文章）
	</li>
</ol>
<p>
	我们再来看看这个方法都干了些什么：
</p>
<pre class="prettyprint lang-js">void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef rls, CFStringRef modeName) {
  
    .....
  
    __CFRunLoopSourceSchedule(rls, rl, rlm);
  
    .....

}

static void __CFRunLoopSourceSchedule(CFRunLoopSourceRef rls, CFRunLoopRef rl, CFRunLoopModeRef rlm) {	
    
    .....
    
    if (0 == rls-&gt;_context.version0.version) {
	     if (NULL != rls-&gt;_context.version0.schedule) {
	         rls-&gt;_context.version0.schedule(rls-&gt;_context.version0.info, rl, rlm-&gt;_name);
	     }
    } 
    
    .....
    
}</pre>
<p>
	从上述的代码片段可以看出，在CFRunLoopAddSource中调用了__CFRunLoopSourceSchedule内部函数，而该函数中正是执行了Run Loop事件源上下文中的schedule回调函数。也就是说当把事件源添加到Run Loop中后就会将事件源与给它发送事件消息的线程进行关联。
</p>
<h3 id="u6807_u8BB0_u4E8B_u4EF6_u6E90_u53CA_u5524_u9192Run_Loop">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u6807_u8BB0_u4E8B_u4EF6_u6E90_u53CA_u5524_u9192Run_Loop" class="headerlink"></a>标记事件源及唤醒Run Loop
</h3>
<p>
	前面的文章中说过，srouce0类型，也就是非port类型的事件源都需要进行手动标记，标记完还需要手动唤醒Run Loop，下面我们来看看这两个方法：
</p>
<pre class="prettyprint lang-js">func CFRunLoopSourceSignal(_ source: CFRunLoopSource!)

func CFRunLoopWakeUp(_ rl: CFRunLoop!)</pre>
<p>
	这里需要注意的是唤醒Run Loop并不等价与启动Run Loop，因为启动Run Loop时需要对Run Loop进行模式、时限的设置，而唤醒Run Loop只是当已启动的Run Loop休眠时重新让其运行。
</p>
<h3 id="u6267_u884CRun_Loop_u4E8B_u4EF6_u6E90_u7684_u4EFB_u52A1">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u6267_u884CRun_Loop_u4E8B_u4EF6_u6E90_u7684_u4EFB_u52A1" class="headerlink"></a>执行Run Loop事件源的任务
</h3>
<p>
	唤醒Run Loop意味着让休眠的Run Loop重新运行，那么我们就从启动Run Loop，让其开始运行的方法看起：
</p>
<pre class="prettyprint lang-js">extension NSRunLoop {

    .....

    public func runUntilDate(limitDate: NSDate) {
        while runMode(NSDefaultRunLoopMode, beforeDate: limitDate) &amp;&amp; limitDate.timeIntervalSinceReferenceDate &gt; CFAbsoluteTimeGetCurrent() { }
    }

    public func runMode(mode: String, beforeDate limitDate: NSDate) -&gt; Bool {
        
        .....
        
        let limitTime = limitDate.timeIntervalSinceReferenceDate
        let ti = limitTime - CFAbsoluteTimeGetCurrent()
        CFRunLoopRunInMode(modeArg, ti, true)
        return true
    }

}

SInt32 CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled) {     
    CHECK_FOR_FORK();
    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);
}

SInt32 CFRunLoopRunSpecific(CFRunLoopRef rl, CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled) {     
    
    .....
    
    result = __CFRunLoopRun(rl, currentMode, seconds, returnAfterSourceHandled, false);
    
    .....
    
    return result;
}

static int32_t __CFRunLoopRun(CFRunLoopRef rl, CFRunLoopModeRef rlm, CFTimeInterval seconds, Boolean stopAfterHandle, Boolean waitIfEmpty) {

    .....
    
    __CFRunLoopDoSources0(rl, rlm, stopAfterHandle);
    
    .....
    
}

static Boolean __CFRunLoopDoSources0(CFRunLoopRef rl, CFRunLoopModeRef rlm, Boolean stopAfterHandle) {

    CFTypeRef sources = NULL;
    
    .....
    
    if (__CFRunLoopSourceIsSignaled(rls)) {
    
        .....
    
        rls-&gt;_context.version0.perform(rls-&gt;_context.version0.info);
        
        .....
    
    }
    
    .....

}</pre>
<p>
	从上述代码片段中可以看出，当Run Loop运行后会调用内部函数__CFRunLoopDoSources0执行自定义事件源的任务，在执行之前会通过内部函数__CFRunLoopSourceIsSignaled(rls)判断事件源是否已被标记为待执行，然后执行Run Loop事件上下文中的perform回调函数。
</p>
<h3 id="u79FB_u9664Run_Loop_u4E8B_u4EF6_u6E90">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u79FB_u9664Run_Loop_u4E8B_u4EF6_u6E90" class="headerlink"></a>移除Run Loop事件源
</h3>
<p>
	当我们自定义的事件源完成使命后就可以将其从Run Loop中移除，我们来看看对应的方法：
</p>
<pre class="prettyprint lang-js">func CFRunLoopRemoveSource(_ rl: CFRunLoop!, _ source: CFRunLoopSource!, _ mode: CFString!)

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef rls, CFStringRef modeName) {
    
    .....
    
    __CFRunLoopSourceCancel(rls, rl, rlm);
    
    .....

}

static void __CFRunLoopSourceCancel(CFRunLoopSourceRef rls, CFRunLoopRef rl, CFRunLoopModeRef rlm) {
    if (0 == rls-&gt;_context.version0.version) {
	      if (NULL != rls-&gt;_context.version0.cancel) {
	          rls-&gt;_context.version0.cancel(rls-&gt;_context.version0.info, rl, rlm-&gt;_name);
	      }
    }
    
    .....
    
}</pre>
<p>
	从上述代码片段可以看出，当我们调用了CFRunLoopRemoveSource方法后，其实是执行了Run Loop事件源上下文中的cancel回调函数。
</p>
<h3 id="u81EA_u5B9A_u4E49Run_Loop_u4E8B_u4EF6_u6E90_u7684_u5B9E_u9645_u8FD0_u7528">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u81EA_u5B9A_u4E49Run_Loop_u4E8B_u4EF6_u6E90_u7684_u5B9E_u9645_u8FD0_u7528" class="headerlink"></a>自定义Run Loop事件源的实际运用
</h3>
<p>
	在讲解示例之前，我们先来看看示例Demo的效果：
</p>
<p>
	<a href="http://7rf34y.com2.z0.glb.qiniucdn.com/c/8bdac0d4234abd37c4f02f9db7ca8b80" class="fancybox"><img src="http://7rf34y.com2.z0.glb.qiniucdn.com/c/8bdac0d4234abd37c4f02f9db7ca8b80" alt="LearnThread-5"></a> 
</p>
<p>
	在这个示例中，创建了两个自定义事件源，一个添加到主线程中，另一个添加到二级线程中。主线程给二级线程中的自定义事件源发送事件消息，目的是让其改变所有UICollectionViewCell的透明度，当二级线程收到事件消息后执行计算每个UICollectionViewCell透明度的任务，然后再给主线程的自定义事件源发送事件消息，让其更新UICollectionViewCell的透明度并显示。下面来看看类图：
</p>
<p>
	<a href="http://7rf34y.com2.z0.glb.qiniucdn.com/c/27426a0959f421a8ffa3f5aef6f1630d" class="fancybox"><img src="http://7rf34y.com2.z0.glb.qiniucdn.com/c/27426a0959f421a8ffa3f5aef6f1630d" alt="LearnThread-6"></a> 
</p>
<p>
	整个工程一共就这六个类：
</p>
<ul>
	<li>
		MainCollectionViewController：程序主控制器，启动程序、展示UI及计算UICollectionViewCell透明度的相关方法。
	</li>
	<li>
		MainThreadRunLoopSource：主线程自定义事件源管理对象，负责初始化事件源，将事件源添加至指定线程，标记事件源并唤醒指定Run Loop以及包含上文中说过的事件源最主要的三个回调方法。
	</li>
	<li>
		MainThreadRunLoopSourceContext：主线程自定义事件源上下文，可获取到对应的事件源及添加了该事件源的Run Loop。
	</li>
	<li>
		SecondaryThreadRunLoopSource：二级线程自定义事件源管理对象，负责初始化事件源，将事件源添加至指定线程，标记事件源并唤醒指定Run Loop以及包含上文中说过的事件源最主要的三个回调方法。
	</li>
	<li>
		SecondaryThreadRunLoopSourceContext：二级线程自定义事件源上下文，可获取到对应的事件源及添加了该事件源的Run Loop。
	</li>
	<li>
		AppDelegate：应用程序代理类，这里零时充当为各自定义事件源回调方法执行内容的管理类。
	</li>
</ul>
<p>
	下面我按照程序的运行顺序一一对这些类及属性和方法进行简单说明。
</p>
<h4 id="u7A0B_u5E8F_u5F00_u59CB_u8FD0_u884C">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u7A0B_u5E8F_u5F00_u59CB_u8FD0_u884C" class="headerlink"></a>程序开始运行
</h4>
<p>
	MainCollectionViewController类中与UI展示相关的方法在这里就不再累赘了。点击<strong>Start</strong>按钮，调用start()方法，初始化MainThreadRunLoopSource对象，在这个过程中初始化了CFRunLoopSourceContext对象并且创建CFRunLoopSource对象以及初始化该事件源的指令池：
</p>
<pre class="prettyprint lang-js">let mainThreadRunLoopSource = MainThreadRunLoopSource()
        
mainThreadRunLoopSource.addToCurrentRunLoop()</pre>
<pre class="prettyprint lang-js">var runloopSourceContext = CFRunLoopSourceContext(version: 0, info: unsafeBitCast(self, UnsafeMutablePointer&lt;Void&gt;.self), retain: nil, release: nil, copyDescription: nil, equal: nil, hash: nil, schedule: runloopSourceScheduleRoutine(), cancel: runloopSourceCancelRoutine(), perform: runloopSourcePerformRoutine())
        
runloopSource = CFRunLoopSourceCreate(kCFAllocatorDefault, 0, &amp;runloopSourceContext)
        
commandBuffer = Array&lt;SecondaryThreadRunLoopSourceContext&gt;()</pre>
<p>
	这里需要注意的是CFRunLoopSourceContext的init方法中的第二个参数和CFRunLoopSourceCreate方法的第三个参数都是指针，那么在Swift中，将对象转换为指针的方法有两种：
</p>
<ul>
	<li>
		使用unsafeBitCast方法，该方法会将第一个参数的内容按照第二个参数的类型进行转换。一般当需要对象与指针来回转换时使用该方法。
	</li>
	<li>
		在对象前面加&amp;符号，表示传入指针地址。
	</li>
</ul>
<p>
	当主线程的自定义事件源初始化完成之后，调用addToCurrentRunLoop()方法，将事件源添加至当前Run Loop中，即主线程的Run Loop：
</p>
<pre class="prettyprint lang-js">let cfrunloop = CFRunLoopGetCurrent()
        
if let rls = runloopSource {
            
    CFRunLoopAddSource(cfrunloop, rls, kCFRunLoopDefaultMode)
            
}</pre>
<p>
	接下来创建二级线程，并且让其执行二级线程的配置任务：
</p>
<pre class="prettyprint lang-js">let secondaryThread = NSThread(target: self, selector: "startThreadWithRunloop", object: nil)
        
secondaryThread.start()</pre>
<p>
	在二级线程中同样初始化自定义事件源，并将将其添加至二级线程的Run Loop中，然后启动Run Loop：
</p>
<pre class="prettyprint lang-js">func startThreadWithRunloop() {
        
    autoreleasepool{
            
        var done = false
            
        let secondaryThreadRunLoopSource = SecondaryThreadRunLoopSource()
            
        secondaryThreadRunLoopSource.addToCurrentRunLoop()
            
        repeat {
                
            let result = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 5, true)
                
            if ((result == CFRunLoopRunResult.Stopped) || (result == CFRunLoopRunResult.Finished)) {
                    
                done = true;
                    
            }
                
        } while(!done)
            
    }
        
}</pre>
<h4 id="u6267_u884C_u4E8B_u4EF6_u6E90_u7684schedule_u56DE_u8C03_u51FD_u6570">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u6267_u884C_u4E8B_u4EF6_u6E90_u7684schedule_u56DE_u8C03_u51FD_u6570" class="headerlink"></a>执行事件源的schedule回调函数
</h4>
<p>
	前文中说过将事件源添加至Run Loop后会触发事件源的schedule回调函数，所以当执行完mainThreadRunLoopSource.addToCurrentRunLoop()这句代码后，便会触发主线程自定义事件源的schedule回调函数：
</p>
<!-- <pre class="prettyprint lang-js">func runloopSourceScheduleRoutine() -&gt; @convention(c) (UnsafeMutablePointer&lt;Void&gt;, CFRunLoop!, CFString!) -&gt; Void {
        
    return { (info, runloop, runloopMode) -&gt; Void in
        
        let mainThreadRunloopSource = unsafeBitCast(info, MainThreadRunLoopSource.self)
            
        let mainThreadRunloopSourceContext = MainThreadRunLoopSourceContext(runloop: runloop, runloopSource: mainThreadRunloopSource)
            
        let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
            
        appDelegate.performSelector("registerMainThreadRunLoopSource:", withObject: mainThreadRunloopSourceContext)
        
    }
        
}</pre> -->
<p>
	这里还需注意的是在Swift2.0中，如果一个作为回调函数方法的返回类型是指向函数的指针，这类指针可以转换为闭包，并且要在闭包前面加上@convention(c)标注。在runloopSourceScheduleRoutine()方法中，获取到主线程事件源对象并初始化事件源上下文对象，然后将该事件源上下文对象传给AppDelegate的对应方法注册该事件源上下文对象：
</p>
<!-- <pre class="prettyprint lang-js">func registerMainThreadRunLoopSource(runloopSourceContext: MainThreadRunLoopSourceContext) {
        
    mainThreadRunloopSourceContext = runloopSourceContext
        
}</pre> -->
<p>
	自然当在二级线程中执行完secondaryThreadRunLoopSource.addToCurrentRunLoop()这句代码后，也会触发二级线程自定义事件源的schedule回调函数：
</p>
<!-- <pre class="prettyprint lang-js">func runloopSourceScheduleRoutine() -&gt; @convention(c) (UnsafeMutablePointer&lt;Void&gt;, CFRunLoop!, CFString!) -&gt; Void {
        
    return { (info, runloop, runloopMode) -&gt; Void in
            
        let secondaryThreadRunloopSource = unsafeBitCast(info, SecondaryThreadRunLoopSource.self)
            
        let secondaryThreadRunloopSourceContext = SecondaryThreadRunLoopSourceContext(runloop: runloop, runloopSource: secondaryThreadRunloopSource)
            
        let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
            
        appDelegate.performSelectorOnMainThread("registerSecondaryThreadRunLoopSource:", withObject: secondaryThreadRunloopSourceContext, waitUntilDone: true)
            
    }
        
}</pre> -->
<p>
	这里要注意的是，在该方法中同样是将二级线程事件源上下文对象传给了AppDelegate的对应方法，但是这里用了performSelectorOnMainThread方法，让其在主线程中执行，目的在于注册完上下文对象后就接着从主线程给二级线程发送事件消息了，其实我将这里作为了主线程触发二级线程执行任务的触发点：
</p>
<!-- <pre class="prettyprint lang-js">func registerSecondaryThreadRunLoopSource(runloopSourceContext: SecondaryThreadRunLoopSourceContext) {
        
    secondaryThreadRunloopSourceContext = runloopSourceContext
        
    sendCommandToSecondaryThread()
        
}
    
func sendCommandToSecondaryThread() {
        
    secondaryThreadRunloopSourceContext?.runloopSource?.commandBuffer?.append(mainThreadRunloopSourceContext!)
        
    secondaryThreadRunloopSourceContext?.runloopSource?.signalSourceAndWakeUpRunloop(secondaryThreadRunloopSourceContext!.runloop!)
        
}</pre> -->
<p>
	从上述代码中可以看到在sendCommandToSecondaryThread()方法中，将主线程的事件源上下文放入了二级线程事件源的指令池中，这里我设计的是只要指令池中有内容就代表事件源需要执行后续任务了。然后执行了二级线程事件源的signalSourceAndWakeUpRunloop()方法，给其标记为待执行，并唤醒二级线程的Run Loop：
</p>
<!-- <pre class="prettyprint lang-js">func signalSourceAndWakeUpRunloop(runloop: CFRunLoopRef) {
        
    CFRunLoopSourceSignal(runloopSource)
        
    CFRunLoopWakeUp(runloop)
        
}</pre> -->
<h4 id="u6267_u884C_u4E8B_u4EF6_u6E90_u7684perform_u56DE_u8C03_u51FD_u6570">
	<a href="http://www.devtalking.com/articles/read-threading-programming-guide-3/#u6267_u884C_u4E8B_u4EF6_u6E90_u7684perform_u56DE_u8C03_u51FD_u6570" class="headerlink"></a>执行事件源的perform回调函数
</h4>
<p>
	当二级线程事件源被标记并且二级线程Run Loop被唤醒后，就会触发事件源的perform回调函数：
</p>
<!-- <pre class="prettyprint lang-js">func runloopSourcePerformRoutine() -&gt; @convention(c) (UnsafeMutablePointer&lt;Void&gt;) -&gt; Void {
        
    return { info -&gt; Void in
            
        let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
            
        appDelegate.performSelector("performSecondaryThreadRunLoopSourceTask")
            
    }
        
}</pre> -->
<p>
	二级线程事件源的perform回调函数会在当前线程，也就是二级线程中执行AppDelegate中的对应方法：
</p>
<!-- <pre class="prettyprint lang-js">func performSecondaryThreadRunLoopSourceTask() {
        
    if secondaryThreadRunloopSourceContext!.runloopSource!.commandBuffer!.count &gt; 0 {
            
        mainCollectionViewController!.generateRandomAlpha()
            
        let mainThreadRunloopSourceContext = secondaryThreadRunloopSourceContext!.runloopSource!.commandBuffer![0]
            
        secondaryThreadRunloopSourceContext!.runloopSource!.commandBuffer!.removeAll()
            
        mainThreadRunloopSourceContext.runloopSource?.commandBuffer?.append(secondaryThreadRunloopSourceContext!)
            
        mainThreadRunloopSourceContext.runloopSource?.signalSourceAndWakeUpRunloop(mainThreadRunloopSourceContext.runloop!)
            
    }
        
}</pre> -->
<p>
	从上述代码中可以看到，先会判断二级线程事件源的指令池中有没有内容，如果有的话，那么执行计算UICollectionViewCell透明度的任务，然后从指令池中获取到主线程事件源上下文对象，将二级线程事件源上下文对象放入主线程事件源的指令池中，并将主线程事件源标记为待执行，然后唤醒主线程Run Loop。之后便会触发主线程事件源的perform回调函数：
</p>
<!-- <pre class="prettyprint lang-js">func runloopSourcePerformRoutine() -&gt; @convention(c) (UnsafeMutablePointer&lt;Void&gt;) -&gt; Void {
        
    return { info -&gt; Void in
            
        let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
            
        appDelegate.performSelector("performMainThreadRunLoopSourceTask")
        
    }
        
}</pre> -->
<!-- <pre class="prettyprint lang-js">func performMainThreadRunLoopSourceTask() {
        
    if mainThreadRunloopSourceContext!.runloopSource!.commandBuffer!.count &gt; 0 {
        
        mainThreadRunloopSourceContext!.runloopSource!.commandBuffer!.removeAll()
            
        mainCollectionViewController!.collectionView.reloadData()
            
        let timer = NSTimer(timeInterval: 1, target: self, selector: "sendCommandToSecondaryThread", userInfo: nil, repeats: false)
            
        NSRunLoop.mainRunLoop().addTimer(timer, forMode: NSDefaultRunLoopMode)
        
    }
        
}</pre> -->
<p>
	在performMainThreadRunLoopSourceTask()方法中同样会先判断主线程事件源的指令池是否有内容，然后执行MainCollectionViewController中的刷新UI的方法，最后再次给二级线程发送事件消息，以此循环。大家可以去Github下载该示例的<a href="https://github.com/DevTalking/CustomRunloopInputSourceSample.git" target="_blank">源码</a>，编译环境是Xcode7.2，然后可以自己试着在界面中添加一个<strong>Stop</strong>按钮，让事件源执行cancel回调函数。
</p>
<p>
	<a href="http://www.devtalking.com/donate.html" class="fancybox"><br>
<img border="0" src="http://7rf34y.com2.z0.glb.qiniucdn.com/c/aa4e83c003db78855f1ee8b2729e7f82"><br>
</a><br>
<a href="http://www.devtalking.com/gongzhonghao.html" class="fancybox"><br>
<img border="0" src="http://7rf34y.com2.z0.glb.qiniucdn.com/c/76538b21b4bd4896949cacaa12e75fb6"></a>
</p><p><a href="http://toutiao.io/r/p8odtb" id="original_url">查看原文</a></p>
</body>
</html>
